const TYPES = {
  // Business layer
  // -- Use cases
  CreateRDUseCase: Symbol.for('CreateRDUseCase'),
  UpdateRDUseCase: Symbol.for('UpdateRDUseCase'),
  ReplaceRDUseCase: Symbol.for('ReplaceRDUseCase'),
  CreateRFPRequestUseCase: Symbol.for('RFPRequestUseCase'),
  GetFilteredRDInfosUseCase: Symbol.for('GetFilteredRDInfosUseCase'),
  GetRDInfoUseCase: Symbol.for('GetRDInfoUseCase'),
  ReceiveRequestMessageUseCase: Symbol.for('ReceiveRequestMessageUseCase'),
  ReceiveResponseMessageUseCase: Symbol.for('ReceiveResponseMessageUseCase'),
  ReceiveAcceptMessageUseCase: Symbol.for('ReceiveAcceptMessageUseCase'),
  ReceiveDeclineMessageUseCase: Symbol.for('ReceiveDeclineMessageUseCase'),
  CreateQuoteUseCase: Symbol.for('CreateQuoteUseCase'),
  SubmitQuoteUseCase: Symbol.for('SubmitQuoteUseCase'),
  RejectRFPUseCase: Symbol.for('RejectRFPUseCase'),
  GetRFPSummaryUseCase: Symbol.for('GetRFPSummaryUseCase'),
  GetParticipantRFPSummaryUseCase: Symbol.for('GetParticipantRFPSummaryUseCase'),
  AcceptQuoteUseCase: Symbol.for('AcceptQuoteUseCase'),
  GetQuoteUseCase: Symbol.for('GetQuoteUseCase'),
  ShareRDUseCase: Symbol.for('ShareRDUseCase'),
  ReceiveRDUpdateUseCase: Symbol.for('ReceiveRDUpdateUseCase'),
  GetRDHistoryUseCase: Symbol.for('GetRDHistory'),
  UpdateQuoteUseCase: Symbol.for('UpdateQuoteUseCase'),
  ReceiveFinalAgreedTermsUpdateUseCase: Symbol.for('ReceiveFinalAgreedTermsUpdateUseCase'),
  ShareQuoteUseCase: Symbol.for('ShareQuoteUseCase'),
  ReceiveTradeUseCase: Symbol.for('ReceiveTradeUseCase'),
  ReceiveCargoUseCase: Symbol.for('ReceiveCargoUseCase'),
  ShareTradeSnapshotUseCase: Symbol.for('ShareTradeSnapshotUseCase'),
  GetQuoteHistoryUseCase: Symbol.for('GetQuoteHistoryUseCase'),
  ReceiveTradeSnapshotUpdateUseCase: Symbol.for('ReceiveTradeSnapshotUpdateUseCase'),
  GetTradeHistoryUseCase: Symbol.for('GetTradeHistoryUseCase'),
  DocumentReceivedUseCase: Symbol.for('DocumentReceivedUseCase'),
  AddDiscountingUseCase: Symbol.for('AddDiscountingUseCase'),
  AddDiscountingMessageProcessor: Symbol.for('AddDiscountingMessageProcessor'),
  ReceiveAddDiscountingRequestUseCase: Symbol.for('ReceiveAddDiscountingRequestUseCase'),

  // -- Others
  RDInfoAggregator: Symbol.for('RDInfoAggregator'),
  ReceivablesDiscountingValidator: Symbol.for('ReceivablesDiscountingValidator'),
  RFPValidator: Symbol.for('RFPValidator'),
  RFPReceivedValidator: Symbol.for('RFPReceivedValidator'),
  QuoteValidator: Symbol.for('QuoteValidator'),
  TradeSnapshotValidator: Symbol.for('TradeSnapshotValidator'),
  AcceptedRDValidator: Symbol.for('AcceptedRDValidator'),
  AddDiscountingValidator: Symbol.for('AddDiscountingValidator'),
  CompanyRegistryClient: Symbol.for('CompanyRegistryClient'),
  TradeCargoClient: Symbol.for('TradeCargoClient'),
  RFPClient: Symbol.for('RFPClient'),
  MessageProcessorService: Symbol.for('MessageProcessorService'),
  UpdateMessageProcessor: Symbol.for('UpdateMessageProcessor'),
  RFPMessageProcessor: Symbol.for('RFPMessageProcessor'),
  TradeCargoMessageProcessor: Symbol.for('TradeCargoMessageProcessor'),
  DocumentMessageProcessor: Symbol.for('DocumentMessageProcessor'),
  ReceiveMessageUseCaseFactory: Symbol.for('ReceiveMessageUseCaseFactory'),
  OutboundMessageFactory: Symbol.for('OutboundMessageFactory'),
  OutboundPublisher: Symbol.for('OutboundPublisher'),
  ReceiveUpdateMessageFactory: Symbol.for('ReceiveUpdateMessageFactory'),
  NotificationClient: Symbol.for('NotificationClient'),
  TaskClient: Symbol.for('TaskClient'),
  ReplyFactory: Symbol.for('ReplyFactory'),
  ReceiveAddDiscountingMessageUseCaseFactory: Symbol.for('ReceiveAddDiscountingMessageUseCaseFactory'),

  // Data layer
  ReceivablesDiscountingDataAgent: Symbol.for('ReceivablesDiscountingDataAgent'),
  RFPDataAgent: Symbol.for('RFPDataAgent'),
  TradeSnapshotDataAgent: Symbol.for('TradeSnapshotDataAgent'),
  QuoteDataAgent: Symbol.for('QuoteDataAgent'),
  ReplyDataAgent: Symbol.for('ReplyDataAgent'),

  // External dependencies
  HealthChecker: Symbol.for('HealthChecker'),
  DataAccess: Symbol.for('DataAccess'),
  MessagingFactory: Symbol.for('MessagingFactory'),
  AxiosInstance: Symbol.for('Axios'),
  NotificationManager: Symbol.for('NotificationManager'),
  TaskManager: Symbol.for('TaskManager')
}

export { TYPES }
