import { ErrorCode } from '@komgo/error-utilities'
import logger, { getLogger } from '@komgo/logging'
import { Server } from '@komgo/microservice-config'
import axios from 'axios'
import * as config from 'config'
import * as http from 'http'

import { ExpressConfig } from './middleware/server-config/Express'
import { RegisterRoutes } from './middleware/server-config/routes'
import './service-layer/controllers/CategoriesController'
import './service-layer/controllers/DocumentTemplateController'
import './service-layer/controllers/HealthController'
import './service-layer/controllers/IncomingRequestsController'
import './service-layer/controllers/OutgoingRequestsController'
import './service-layer/controllers/ProductsController'
import './service-layer/controllers/ReceivedDocumentsController'
import './service-layer/controllers/RegisterController'
import './service-layer/controllers/SendDocumentsController'
import './service-layer/controllers/TemplatesController'
import './service-layer/controllers/TradeFinanceController'
import './service-layer/controllers/TypesController'
import './types'
import { connectToDb } from './utils/connectToDb'
import { ErrorName } from './utils/ErrorName'
import { setUpLogging } from './utils/setupLogging'

const nodeFrameWork = new ExpressConfig()
const port = config.get('express.port')
const logLevel = config.get('loglevel')
const containerName = process.env.CONTAINER_HOSTNAME

setUpLogging()

let service: http.Server

const server = new Server(getLogger('Server'))

async function runServer() {
  connectToDb()
  logger.info('Starting server on port: %d', port)

  // Adds requests processing middleware generated by "tsoajj"
  RegisterRoutes(server.express)

  service = await server
    .setServiceName(containerName)
    .setLogConfig(logLevel as any)
    .addRequestIdHeaderToAxios(axios)
    .setForwardAxiosErrors(true)
    // Adds error handling middleware
    // Should be added after all other middleware to have effect
    .withErrorHandlers()
    .startOn(port as any)
}

function stopServer() {
  try {
    service.close()
  } catch (error) {
    logger.error(ErrorCode.Connection, ErrorName.StopServerError, 'Error when stopping service', {
      errorMessage: error.message
    })
  }
  logger.info('Server stopped')
}

export { runServer, stopServer }

export default nodeFrameWork.app
